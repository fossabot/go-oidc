package models

import (
	"strings"

	"github.com/go-jose/go-jose/v4"
	"github.com/go-jose/go-jose/v4/jwt"
	"github.com/google/uuid"
	"github.com/luikymagno/auth-server/internal/unit"
	"github.com/luikymagno/auth-server/internal/unit/constants"
)

type GrantModelInfo struct {
	Id                  string
	Issuer              string
	ExpiresInSecs       int
	IsRefreshable       bool
	RefreshLifetimeSecs int
	OpenIdKeyId         string
}

func (grantModelInfo GrantModelInfo) GenerateIdToken(ctxInfo GrantContext) string {
	timestampNow := unit.GetTimestampNow()
	claims := map[string]any{
		string(constants.Issuer):   grantModelInfo.Issuer,
		string(constants.Subject):  ctxInfo.Subject,
		string(constants.Audience): ctxInfo.ClientId,
		string(constants.IssuedAt): timestampNow,
		string(constants.Expiry):   timestampNow + grantModelInfo.ExpiresInSecs,
	}
	if ctxInfo.Nonce != "" {
		claims[string(constants.Nonce)] = ctxInfo.Nonce
	}
	for k, v := range ctxInfo.AdditionalIdTokenClaims {
		claims[k] = v
	}

	jwk, _ := unit.GetPrivateKey(grantModelInfo.OpenIdKeyId)
	signer, _ := jose.NewSigner(
		jose.SigningKey{Algorithm: jose.SignatureAlgorithm(jwk.Algorithm), Key: jwk.Key},
		(&jose.SignerOptions{}).WithType("jwt").WithHeader("kid", grantModelInfo.OpenIdKeyId),
	)

	idToken, _ := jwt.Signed(signer).Claims(claims).Serialize()
	return idToken
}

func (grantModelInfo GrantModelInfo) generateGrantSession(
	tokenId string,
	accessToken string,
	tokenFormat constants.TokenFormat,
	ctxInfo GrantContext,
) GrantSession {
	grantSession := GrantSession{
		Id:                      uuid.NewString(),
		TokenId:                 tokenId,
		GrantModelId:            grantModelInfo.Id,
		Token:                   accessToken,
		TokenFormat:             tokenFormat,
		ExpiresInSecs:           grantModelInfo.ExpiresInSecs,
		CreatedAtTimestamp:      unit.GetTimestampNow(),
		Subject:                 ctxInfo.Subject,
		ClientId:                ctxInfo.ClientId,
		Scopes:                  ctxInfo.Scopes,
		Nonce:                   ctxInfo.Nonce,
		AdditionalTokenClaims:   ctxInfo.AdditionalTokenClaims,
		AdditionalIdTokenClaims: ctxInfo.AdditionalIdTokenClaims,
	}

	if ctxInfo.GrantType != constants.ClientCredentials && grantModelInfo.IsRefreshable {
		grantSession.RefreshToken = unit.GenerateRefreshToken()
		grantSession.RefreshTokenExpiresIn = grantModelInfo.RefreshLifetimeSecs
	}

	if unit.Contains(ctxInfo.Scopes, []string{constants.OpenIdScope}) {
		grantSession.IdToken = grantModelInfo.GenerateIdToken(ctxInfo)
	}

	return grantSession
}

type GrantModel interface {
	ToOutput() GrantModelOut
	GenerateToken(GrantContext) GrantSession
	GenerateIdToken(GrantContext) string
}

type GrantModelOut struct{}

type GrantModelIn struct{}

func (model GrantModelIn) ToInternal() GrantModel {
	return OpaqueGrantModel{}
}

//---------------------------------------- Opaque ----------------------------------------//

type OpaqueGrantModel struct {
	TokenLength int
	GrantModelInfo
}

func (grantModel OpaqueGrantModel) GenerateToken(ctxInfo GrantContext) GrantSession {
	accessToken := unit.GenerateRandomString(grantModel.TokenLength, grantModel.TokenLength)
	return grantModel.GrantModelInfo.generateGrantSession(accessToken, accessToken, constants.Opaque, ctxInfo)
}

func (model OpaqueGrantModel) ToOutput() GrantModelOut {
	return GrantModelOut{}
}

//---------------------------------------- JWT ----------------------------------------//

type JWTGrantModel struct {
	KeyId string
	GrantModelInfo
}

func (grantModel JWTGrantModel) GenerateToken(ctxInfo GrantContext) GrantSession {
	jwtId := uuid.NewString()
	timestampNow := unit.GetTimestampNow()
	claims := map[string]any{
		string(constants.TokenId):  jwtId,
		string(constants.Issuer):   grantModel.Issuer,
		string(constants.Subject):  ctxInfo.Subject,
		string(constants.Scope):    strings.Join(ctxInfo.Scopes, " "),
		string(constants.IssuedAt): timestampNow,
		string(constants.Expiry):   timestampNow + grantModel.ExpiresInSecs,
	}
	for k, v := range ctxInfo.AdditionalTokenClaims {
		claims[k] = v
	}

	jwk, _ := unit.GetPrivateKey(grantModel.KeyId)
	signer, _ := jose.NewSigner(
		jose.SigningKey{Algorithm: jose.SignatureAlgorithm(jwk.Algorithm), Key: jwk.Key},
		// RFC9068. "...This specification registers the "application/at+jwt" media type,
		// which can be used to indicate that the content is a JWT access token."
		(&jose.SignerOptions{}).WithType("at+jwt").WithHeader("kid", grantModel.KeyId),
	)

	accessToken, _ := jwt.Signed(signer).Claims(claims).Serialize()
	return grantModel.GrantModelInfo.generateGrantSession(jwtId, accessToken, constants.JWT, ctxInfo)
}

func (model JWTGrantModel) ToOutput() GrantModelOut {
	return GrantModelOut{}
}
